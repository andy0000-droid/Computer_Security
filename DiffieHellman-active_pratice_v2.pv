(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2023                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*)
(* Signed Diffie-Hellman
	A -> B : { e^n0 }skA, pkA    (n0 fresh)
        B -> A : { e^n1 }skB         (n1 fresh)
          A and B compute the key as k = (e^n0)^n1 = (e^n1)^n0
        A -> B : { s }k

 *)

(* 
    컴퓨터보안론 과제
    Written by 최순욱 (2021270116)
*)

(*
    1. alice, bob, Carol이 각자 개인키 생성 (a, b, c)
    2. g, p 생성 및 공개
    3. 공개키 생성 및 공개 (g^a, g^b, g^c)
    4. 공개키를 기반으로 공유키 생성 (g^{abc})
    5. 공유키 해싱 후 공개
    6. 해시 값이 다르면 중간자 감지
*)

(*
    g^a
    g^b
    g^c

->
    g^{ab} -> AB
    g^{bc} -> BC
    g^{ca} -> CA

->
    AB^c
    BC^a
    CA^b

->
    g^{abc}
*)

free c: channel.

type pkey.
type skey.
type G.
type exponent.

(* Signatures *)
fun sign(G, skey): bitstring.
fun pk(skey):pkey.
reduc forall m: G, k: skey; getmess(sign(m,k)) = m.
(* getmess destructor allows the attacker to get the message m from the signature, even without having key *)

reduc forall m: G, k: skey; checksign(sign(m,k), pk(k)) = m.
(* checksign destructor checks the signature, and returns m only when the signature is correct *)

(* Shared key encryption *)
fun enc(bitstring, G): bitstring.
reduc forall x: bitstring, y: G; dec(enc(x,y),y) = x.

(* Diffie-Hellman *)
const g: G.

(* (G^x)^y = (G^y)^x *)
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).


(* (G^xy)^z = (G^yz)^x *)
equation forall x: exponent, y: exponent, z: exponent; exp(exp(exp(g, x), y), z) = exp(exp(exp(g, y), z), x).
equation forall x: exponent, y: exponent, z: exponent; exp(exp(exp(g, y), z), x) = exp(exp(exp(g, z), x), y).
equation forall x: exponent, y: exponent, z: exponent; exp(exp(exp(g, z), x), y) = exp(exp(exp(g, x), y), z).


(* Hash *)
fun h(bitstring): bitstring.

(* Test whether s is secret *)
free s: bitstring [private].
query attacker(s).

(* The process *)
let p0(skA: skey, pkA: pkey, pkB: pkey, pkC: pkey) = 
    (*in(c, pk_AX: pkey);*)

	new n0: exponent;
  let kA = exp(g, n0) in
    out(c, sign(kA, skA));

	in(c, pb: bitstring); 
	let kb = checksign(pb, pkB) in (* g_ab = g^{ab} *)

	let tmp_k = exp(g_ab, n0) in 
  

let p1(skB: skey, pkB: pkey, pkA: pkey, pkC: pkey) = 
    (*in(c, (m0: bitstring, pkY: pkey));*)
  in(c, m0:bitstring);
	let x0 = checksign(m0, pkA) in

	new n1: exponent; 
    let kB = exp(x0, n1) in out(c,sign(kB, skB));

  in (c, m: bitstring); 
  let s2 = dec(m,k) in 0.

let p2(skC: skey, pkC: pkey, pkA: pkey, pkB: pkey) =
  in(c, (m1: bitstring, pkZ: pkey));

  let x2 = checksign(m1, pkZ) in

  new n2: exponent;
    let k = exp(x2, n2) in out(c, sign(exp(g, n2), skC));

  in (c, m:bitstring);
  let s3 = dec(m, k) in 0.

process 
	new skA: skey;
	let pkA = pk(skA) in
	out(c, pkA);

	new skB: skey;
	let pkB = pk(skB) in
	out(c, pkB);

  new skC: skey;
  let pkC = pk(skC) in
  out(c, pkC);

(*
	((!p0(skA, pkA, pkB)) | (!p1(skB, pkB, pkA)))
*)
  ((!p0(skA, pkA, pkB, pkC)) | (!p1(skB, pkB, pkA, pkC)) | (!p2(skC, pkC, pkA, pkB)))
(* EXPECTPV
RESULT not attacker(s[]) is true.
0.009s (user 0.006s + system 0.003s), max rss 10060K
END *)
